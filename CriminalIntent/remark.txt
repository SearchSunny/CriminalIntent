第7章
UI fragment与fragment管理器
本章，我们将学习开发一个名为CriminalIntent的应用。CriminalIntent应用可详细记录种种办
公室陋习，如随手将脏盘子丢在休息室水槽里，以及打印完自己的文件便径直走开，全然不顾打
印机里已经缺纸等。
通过CriminalIntent应用，陋习记录可包含标题、日期以及照片。也可在联系人中查找当事人，
然后通过Email、Twitter、Facebook或其他应用提出不满意见。记录并报告陋习后，有了好心情，
就可以继续完成工作或处理手头上的事情。
7.6 FragmentManager与fragment生命周期
	activity的FragmentManager负责调用队列中fragment的生命周期方法。添加fragment供
FragmentManager管理时，onAttach(Activity)、onCreate(Bundle)以及 onCreateView(...)方法会被调用。
	托管activity的onCreate(...)方法执行后，onActivityCreated(...)方法也会被调用。因
为我们正在向CrimeActivity.onCreate(...)方法中添加CrimeFragment，所以fragment被添
加后，该方法会被调用。
	向处于运行状态的activity中添加fragment时，以下fragment生命周期方法会被依次调用：
onAttach(Activity)、onCreate(Bundle)、 onCreateView(...)、onActivityCreated(Bundle)、
onStart()，以及onResume()方法。

第10章 使用fragment argument
10.1 从fragment 中启动activity
	从fragment中启动activity的实现方式，基本等同于从activity中启动另一activity的实现方式。
我们调用Fragment.startActivity(Intent)方法，该方法在后台会调用对应的Activity方法。
10.1.1 附加extra信息
	通过将mCrimeId值附加到Intent的extra上，我们可以告知CrimeFragment应显示的Crime
10.1.2 获取extra信息
	mCrimeId值现已安全存储到CrimeActivity的intent中。然而，要获取和使用extra信息的是CrimeFragment类。
	fragment有两种方式获取保存在activity的intent内的数据信息，即简单直接的方式和复杂灵活
的方式。在实现复杂但灵活的方式（该方式涉及到fragment argument的概念）前，我们首先试试
简单的方式。
简单起见，CrimeFragment直接使用getActivity()方法获取CrimeActivity的intent。返回
至CrimeFragment类，为extra添加key。然后，在onCreate(Bundle)方法中，得到CrimeActivity
的intent内的extra信息后，再使用它获取Crime对象。
	//简单的获取方式
	//UUID crimeId = (UUID)getActivity().getIntent().getSerializableExtra(EXTRA_CRIME_ID);
10.1.4 直接获取extra信息方式的缺点
	只需几行简单的代码，就可实现让fragment直接获取托管activity的intent。然而，这种方式是
以牺牲fragment的封装性为代价的。CrimeFragment不再是可复用的构建单元， 因为它总是需要
由某个具体activity托管着，该activity的Intent又定义了名为EXTRA_CRIME_ID的extra。
就CrimeFragment类来说，这看起来合情合理。但这也意味着，按照当前的编码实现，
CrimeFragment便再也无法用于任何其他的activity了。
一个比较好的做法是，将mCrimeId存储在CrimeFragment的某个地方，而不是将它保存在
CrimeActivity的私有空间里。这样，无需依赖于CrimeActivity的intent内指定extra的存在，
CrimeFragment就能获取自己所需的extra数据信息。fragment的“某个地方”实际就是它的
arguments bundle。
10.2 fragment argument
	每个fragment实例都可附带一个Bundle对象。该bundle包含有key-value对，我们可以如同附
加extra到Activity的intent中那样使用它们。一个key-value对即一个argument。
10.2.1 附加argument给fragment
	附加argument bundle给fragment，需调用Fragment.setArguments(Bundle)方法。注意，该
任务必须在fragment创建后、添加给activity前完成。
	Bundle args = new Bundle();
		args.putSerializable(EXTRA_CRIME_ID, crimeId);
		
		CrimeFragment fragment = new CrimeFragment();
		fragment.setArguments(args);
10.2.2 获取argument
	fragment在需要获取它的argument时，会先调用Fragment类的getArguments()方法，接着
再调用Bundle的限定类型的“get”方法，如getSerializable(...)方法。
	现在回到CrimeFragment.onCreate(...)方法中，调整代码，改为从fragment的argument
中获取UUID。
	//获取argument
	UUID crimeId = (UUID)getArguments().getSerializable(EXTRA_CRIME_ID);
	
第11章使用viewPager



第12章 对话框
AlertDialog视图封装在DialogFragment（Fragment的子类）实例中。不使
用DialogFragment，也可显示AlertDialog视图，但Android开发原则不推荐这种做法。使用
FragmentManager管理对话框，可使用更多配置选项来显示对话框。
另外，如果设备发生旋转，独立配置使用的AlertDialog会在旋转后消失，而配置封装在
fragment中的AlertDialog则不会有此问题。

二、同一activity托管的两个fragment，即CrimeFragment和DatePickerFragment间的数据传递;
2.1 传递数据给DatePickerFragment
要传递crime的记录日期给DatePickerFragment，需实现一个newInstance(Date)方法，
然后将Date作为argument附加给fragment。
2.2 返回数据给CrimeFragment
    为返回新日期给CrimeFragment，并实现模型层以及对应视图的更新，需将日期打包为extra
并附加到Intent上，然后调用CrimeFragment.onActivityResult(...)方法，并传入准备好
的Intent参数。
        对于activity的数据回传，我们调用startActivityForResult(...)方法，ActivityManager
负责跟踪记录父activity与子activity间的关系。当子activity回传数据后被销毁了，ActivityManager
知道接收返回数据的应为哪一个activity。
    1. 设置目标fragment
类似于activity间的关联，可将CrimeFragment设置成DatePickerFragment的目标fragment。
要建立这种关联，可调用以下Fragment方法
        目标fragment以及请求代码由FragmentManager负责跟踪记录，我们可调用fragment（设置
目标fragment的fragment）的getTargetFragment()和getTargetRequestCode()方法获取它们。
	2. 传递数据给目标fragment
    Activity.onActivityResult(...)方法是ActivityManager在子activity销毁后调用的父
activity方法。处理activity间的数据返回时，无需亲自动手，ActivityManager会自动调用Activity.
onActivityResult(...)方法。父activity接收到Activity.onActivityResult(...)方法的调用
后，其FragmentManager会调用对应fragment的Fragment.onActivityResult(...)方法